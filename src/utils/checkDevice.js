import { exec } from 'child_process';
import { authDb } from '../constants/index.js';

const allowedMacs = authDb.mac;

export const checkDevice = () => {
    exec(
        'sudo /smarthome-back/src/scripts/arp-scan.sh',
        (error, stdout, stderr) => {
            if (error) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
                return;
            }

            if (stderr) {
                console.error(`‚ö†Ô∏è stderr: ${stderr}`);
                // –ù–µ return, –±–æ arp-scan —ñ–Ω–æ–¥—ñ –≤ stderr –ª–∏—à–µ warning‚Äô–∏
            }

            // üîç –†–æ–∑–±–∏—Ä–∞—î–º–æ stdout –Ω–∞ —Ä—è–¥–∫–∏
            const lines = stdout.split('\n');

            // üì¶ –ú–∞—Å–∏–≤ MAC-–∞–¥—Ä–µ—Å
            const detectedMacs = [];

            for (const line of lines) {
                // –®—É–∫–∞—î–º–æ —Ä—è–¥–∫–∏, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å IP —ñ MAC
                const match = line.match(
                    /^(\d+\.\d+\.\d+\.\d+)\s+([0-9a-fA-F:]{17})/,
                );
                if (match) {
                    const mac = match[2].toUpperCase();
                    detectedMacs.push(mac);
                }
            }

            console.log('üîç –ó–Ω–∞–π–¥–µ–Ω—ñ MAC-–∞–¥—Ä–µ—Å–∏:', detectedMacs);

            // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Ö–æ—á –æ–¥–∏–Ω —ñ–∑ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö MAC
            const foundMac = detectedMacs.find(mac =>
                allowedMacs.some(allowed => allowed.toUpperCase() === mac),
            );

            if (foundMac) {
                switch (foundMac) {
                    case '42:4B:13:10:02:24':
                        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω Hennadii');
                        break;
                    case '62:07:5C:44:10:D7':
                        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –ø–ª–∞–Ω—à–µ—Ç –¥—Ä—É–∂–∏–Ω–∏');
                        break;
                }
                console.log(`‚úÖ –î–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–æ –¥–ª—è MAC: ${foundMac}`);
            } else {
                console.log('‚ùå –ñ–æ–¥–µ–Ω –∑ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö MAC –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
            }
        },
    );
};
// const { exec } = require('child_process');

// // –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö MAC-–∞–¥—Ä–µ—Å (–Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä!)

// // –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
// function checkForDevices() {}

// // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–ª–∞–ø–∞–Ω–∞ (–∞–±–æ –±—É–¥—å-—è–∫–æ—ó —ñ–Ω—à–æ—ó –¥—ñ—ó)
// function openValve() {
//     console.log('üö∞ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∫–ª–∞–ø–∞–Ω...');
//     // –¢—É—Ç —Ç–≤–æ—è –ª–æ–≥—ñ–∫–∞ ‚Äî HTTP-–∑–∞–ø–∏—Ç –¥–æ ESP32, –∑–º—ñ–Ω–∞ GPIO, —Ç–æ—â–æ
// }

// // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
// setInterval(checkForDevices, 60 * 1000);
